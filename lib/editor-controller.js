"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Atom = require("atom");
const rx = require("./regex");
const selectors = [
    'identifier.haskell',
    'entity.name.type.haskell',
    'entity.name.tag.haskell',
];
const operatorSelectors = [
    'keyword.operator.haskell',
    'entity.name.function.infix.haskell',
];
const activationScopes = ['source.haskell', 'text.tex.latex.haskell'];
const knownIdentClass = 'syntax--known-identifier';
class EditorController {
    constructor(editor, cb) {
        this.editor = editor;
        this.cb = cb;
        this.disposed = false;
        this.disposables = new Atom.CompositeDisposable();
        this.layer = this.editor.addMarkerLayer();
        this.disposables.add(this.editor.getBuffer().onDidChangeText((arg) => {
            handlePromise(this.didChangeText(arg));
        }));
        this.disposables.add(editor.onDidDestroy(() => {
            this.dispose();
        }));
        this.init();
    }
    static shouldActivate(ed) {
        return activationScopes.includes(ed.getGrammar().scopeName);
    }
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            this.layer.destroy();
            this.disposables.dispose();
        }
    }
    async init() {
        this.updateHighlightInRange(await this.getSymbols(), this.editor.getBuffer().getRange());
    }
    async didChangeText({ changes }) {
        const buffer = this.editor.getBuffer();
        const sbs = await this.getSymbols();
        for (const { newRange, oldRange } of changes) {
            for (const row of newRange.union(oldRange).getRows()) {
                this.updateHighlightInRange(sbs, buffer.rangeForRow(row));
            }
        }
    }
    updateHighlightInRange(sbs, searchRange) {
        for (const marker of this.layer.findMarkers({
            intersectsBufferRange: searchRange,
        })) {
            marker.destroy();
        }
        const buffer = this.editor.getBuffer();
        const range = Atom.Range.fromObject(searchRange);
        const decorate = (idents, selectors) => {
            for (const ident of idents) {
                if (sbs.has(buffer.getTextInRange(ident))) {
                    this.decorateRange(ident, selectors);
                }
            }
        };
        handlePromise(buffer
            .findAllInRange(rx.identRx, range)
            .then((idents) => decorate(idents, selectors)));
        handlePromise(buffer
            .findAllInRange(rx.operatorRx, range)
            .then((ops) => decorate(ops, operatorSelectors)));
    }
    async getSymbols() {
        const symbols = await this.cb.getCompletionsForSymbol(this.editor.getBuffer(), '', Atom.Point.fromObject([0, 0]));
        return new Set(symbols.map(({ qname }) => qname));
    }
    decorateRange(range, myselectors) {
        const [inScope] = this.editor
            .scopeDescriptorForBufferPosition(range.start)
            .getScopesArray()
            .filter((sel) => myselectors.includes(sel));
        if (inScope) {
            const srange = this.editor.bufferRangeForScopeAtPosition(inScope, range.start);
            const marker = this.layer.markBufferRange(srange || range, {
                invalidate: 'never',
            });
            this.editor.decorateMarker(marker, {
                type: 'text',
                class: knownIdentClass,
            });
        }
    }
}
exports.EditorController = EditorController;
function handlePromise(p) {
    p.catch(function (e) {
        atom.notifications.addError(`Something went wrong in language-haskell-scoped: ${e.name}`, {
            detail: e.message,
            stack: e.stack,
            dismissable: true,
        });
    });
}
//# sourceMappingURL=data:application/json;base64,
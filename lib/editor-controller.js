"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Atom = require("atom");
const rx = require("./regex");
const selectors = [
    'identifier.haskell',
    'entity.name.type.haskell',
    'entity.name.tag.haskell',
];
const operatorSelectors = [
    'keyword.operator.haskell',
    'entity.name.function.infix.haskell',
];
const activationScopes = ['source.haskell', 'text.tex.latex.haskell'];
const knownIdentClass = 'syntax--known-identifier';
class EditorController {
    constructor(editor, cb) {
        this.editor = editor;
        this.cb = cb;
        this.disposed = false;
        this.disposables = new Atom.CompositeDisposable();
        this.layer = this.editor.addMarkerLayer();
        this.disposables.add(this.editor.getBuffer().onDidChangeText(async ({ changes }) => {
            const sbs = await this.getSymbols();
            for (const { newRange } of changes) {
                await this.updateHighlightInRange(sbs, [
                    [newRange.start.row, 0],
                    [newRange.end.row + 1, 0],
                ]);
            }
        }));
        this.disposables.add(editor.onDidDestroy(() => {
            this.dispose();
        }));
        this.init();
    }
    static shouldActivate(ed) {
        return activationScopes.includes(ed.getGrammar().scopeName);
    }
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            this.layer.destroy();
            this.disposables.dispose();
        }
    }
    async init() {
        await this.updateHighlightInRange(await this.getSymbols(), this.editor.getBuffer().getRange());
    }
    async updateHighlightInRange(sbs, searchRange) {
        for (const marker of this.layer.findMarkers({
            intersectsBufferRange: searchRange,
        })) {
            marker.destroy();
        }
        this.editor.scanInBufferRange(rx.identRx, searchRange, async ({ matchText, range }) => {
            if (sbs.has(matchText)) {
                await this.decorateRange(range, selectors);
            }
        });
        this.editor.scanInBufferRange(rx.operatorRx, searchRange, async ({ matchText, range }) => {
            if (sbs.has(matchText)) {
                await this.decorateRange(range, operatorSelectors);
            }
        });
    }
    async getSymbols() {
        const symbols = await this.cb.getCompletionsForSymbol(this.editor.getBuffer(), '', Atom.Point.fromObject([0, 0]));
        return new Set(symbols.map(({ qname }) => qname));
    }
    async decorateRange(range, myselectors) {
        const [inScope] = this.editor
            .scopeDescriptorForBufferPosition(range.start)
            .getScopesArray()
            .filter((sel) => myselectors.includes(sel));
        if (inScope) {
            const srange = this.editor.bufferRangeForScopeAtPosition(inScope, range.start);
            const marker = this.layer.markBufferRange(srange || range, {
                invalidate: 'never',
            });
            this.editor.decorateMarker(marker, {
                type: 'text',
                class: knownIdentClass,
            });
        }
    }
}
exports.EditorController = EditorController;
//# sourceMappingURL=data:application/json;base64,